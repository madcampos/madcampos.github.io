const CACHE_VERSION="v1",appShellFiles=["./index.html"],worker=self;async function fetchFromCache(t){const e=await caches.match(t);return e||null}async function fetchFromNetwork(t){try{const e=await fetch(t),a=.7,{quota:c,usage:n}=await navigator.storage.estimate();if(!((n??0)/(c??1)>=a)){const o=e.clone();await(await caches.open(CACHE_VERSION)).put(t,o)}return e}catch(e){console.error("[⚙️] Network fetch failed!"),console.error(e)}return new Response("Service Unavailable",{headers:new Headers({"Content-Type":"text/plain"}),status:503,statusText:"Service Unavailable"})}worker.addEventListener("install",async()=>{try{await(await caches.open(CACHE_VERSION)).addAll(appShellFiles),await worker.skipWaiting(),console.log(`[⚙️] Service worker installed for version ${CACHE_VERSION}`)}catch(t){console.error("[⚙️] Error installing worker:"),console.error(t)}}),worker.addEventListener("activate",async()=>{(await worker.clients.matchAll({includeUncontrolled:!0})).forEach(a=>{console.log(`[⚙️] Matching client: ${a.url}`)});const e=await caches.keys();for await(const a of e)a!==CACHE_VERSION&&(console.log(`[⚙️] Deleting old cache "${a}"`),await caches.delete(a)),console.log(`[⚙️] Claming clients for version: ${CACHE_VERSION}`),await worker.clients.claim()}),worker.addEventListener("fetch",async t=>{let e=await fetchFromCache(t.request);return e||(e=await fetchFromNetwork(t.request)),e});
